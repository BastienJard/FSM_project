/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.drinkingmachine;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkingMachineStatemachine implements IDrinkingMachineStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean cancelButton;
		
		
		public void raiseCancelButton() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancelButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coffeeButton;
		
		
		public void raiseCoffeeButton() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coffeeButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean slider;
		
		
		public void raiseSlider() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							slider = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nFCButton;
		
		
		public void raiseNFCButton() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							nFCButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean boissonPrete;
		
		
		public void raiseBoissonPrete() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							boissonPrete = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nettoyageText;
		
		
		public boolean isRaisedNettoyageText() {
			synchronized(DrinkingMachineStatemachine.this) {
				return nettoyageText;
			}
		}
		
		protected void raiseNettoyageText() {
			synchronized(DrinkingMachineStatemachine.this) {
				nettoyageText = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onNettoyageTextRaised();
				}
			}
		}
		
		private boolean doReset;
		
		
		public boolean isRaisedDoReset() {
			synchronized(DrinkingMachineStatemachine.this) {
				return doReset;
			}
		}
		
		protected void raiseDoReset() {
			synchronized(DrinkingMachineStatemachine.this) {
				doReset = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetRaised();
				}
			}
		}
		
		private boolean prepareBoisson;
		
		
		public boolean isRaisedPrepareBoisson() {
			synchronized(DrinkingMachineStatemachine.this) {
				return prepareBoisson;
			}
		}
		
		protected void raisePrepareBoisson() {
			synchronized(DrinkingMachineStatemachine.this) {
				prepareBoisson = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPrepareBoissonRaised();
				}
			}
		}
		
		private boolean enAttente;
		
		
		public boolean isRaisedEnAttente() {
			synchronized(DrinkingMachineStatemachine.this) {
				return enAttente;
			}
		}
		
		protected void raiseEnAttente() {
			synchronized(DrinkingMachineStatemachine.this) {
				enAttente = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEnAttenteRaised();
				}
			}
		}
		
		private boolean updateBoisson;
		
		
		public boolean isRaisedUpdateBoisson() {
			synchronized(DrinkingMachineStatemachine.this) {
				return updateBoisson;
			}
		}
		
		protected void raiseUpdateBoisson() {
			synchronized(DrinkingMachineStatemachine.this) {
				updateBoisson = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onUpdateBoissonRaised();
				}
			}
		}
		
		protected void clearEvents() {
			cancelButton = false;
			coffeeButton = false;
			slider = false;
			nFCButton = false;
			boissonPrete = false;
		}
		protected void clearOutEvents() {
		
		nettoyageText = false;
		doReset = false;
		prepareBoisson = false;
		enAttente = false;
		updateBoisson = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Demarrage,
		main_region_Pr_par_,
		main_region_En_pr_partation,
		main_region_GestionCommande,
		main_region_GestionCommande__region0_Boisson,
		main_region_GestionCommande__region0_Slider,
		main_region_GestionCommande__region0_Pay_,
		main_region_GestionCommande__region0_EnAttente,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DrinkingMachineStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Demarrage:
				main_region_Demarrage_react(true);
				break;
			case main_region_Pr_par_:
				main_region_Pr_par__react(true);
				break;
			case main_region_En_pr_partation:
				main_region_En_pr_partation_react(true);
				break;
			case main_region_GestionCommande__region0_Boisson:
				main_region_GestionCommande__region0_Boisson_react(true);
				break;
			case main_region_GestionCommande__region0_Slider:
				main_region_GestionCommande__region0_Slider_react(true);
				break;
			case main_region_GestionCommande__region0_Pay_:
				main_region_GestionCommande__region0_Pay__react(true);
				break;
			case main_region_GestionCommande__region0_EnAttente:
				main_region_GestionCommande__region0_EnAttente_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Demarrage:
			return stateVector[0] == State.main_region_Demarrage;
		case main_region_Pr_par_:
			return stateVector[0] == State.main_region_Pr_par_;
		case main_region_En_pr_partation:
			return stateVector[0] == State.main_region_En_pr_partation;
		case main_region_GestionCommande:
			return stateVector[0].ordinal() >= State.
					main_region_GestionCommande.ordinal()&& stateVector[0].ordinal() <= State.main_region_GestionCommande__region0_EnAttente.ordinal();
		case main_region_GestionCommande__region0_Boisson:
			return stateVector[0] == State.main_region_GestionCommande__region0_Boisson;
		case main_region_GestionCommande__region0_Slider:
			return stateVector[0] == State.main_region_GestionCommande__region0_Slider;
		case main_region_GestionCommande__region0_Pay_:
			return stateVector[0] == State.main_region_GestionCommande__region0_Pay_;
		case main_region_GestionCommande__region0_EnAttente:
			return stateVector[0] == State.main_region_GestionCommande__region0_EnAttente;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseCancelButton() {
		sCInterface.raiseCancelButton();
	}
	
	public synchronized void raiseCoffeeButton() {
		sCInterface.raiseCoffeeButton();
	}
	
	public synchronized void raiseSlider() {
		sCInterface.raiseSlider();
	}
	
	public synchronized void raiseNFCButton() {
		sCInterface.raiseNFCButton();
	}
	
	public synchronized void raiseBoissonPrete() {
		sCInterface.raiseBoissonPrete();
	}
	
	public synchronized boolean isRaisedNettoyageText() {
		return sCInterface.isRaisedNettoyageText();
	}
	
	public synchronized boolean isRaisedDoReset() {
		return sCInterface.isRaisedDoReset();
	}
	
	public synchronized boolean isRaisedPrepareBoisson() {
		return sCInterface.isRaisedPrepareBoisson();
	}
	
	public synchronized boolean isRaisedEnAttente() {
		return sCInterface.isRaisedEnAttente();
	}
	
	public synchronized boolean isRaisedUpdateBoisson() {
		return sCInterface.isRaisedUpdateBoisson();
	}
	
	/* Entry action for state 'Demarrage'. */
	private void entryAction_main_region_Demarrage() {
		timer.setTimer(this, 0, 50, false);
	}
	
	/* Entry action for state 'Préparé'. */
	private void entryAction_main_region_Pr_par_() {
		timer.setTimer(this, 1, (5 * 1000), false);
	}
	
	/* Entry action for state 'Boisson'. */
	private void entryAction_main_region_GestionCommande__region0_Boisson() {
		timer.setTimer(this, 2, 50, false);
	}
	
	/* Entry action for state 'Slider'. */
	private void entryAction_main_region_GestionCommande__region0_Slider() {
		timer.setTimer(this, 3, 50, false);
	}
	
	/* Entry action for state 'Payé'. */
	private void entryAction_main_region_GestionCommande__region0_Pay_() {
		timer.setTimer(this, 4, (2 * 1000), false);
	}
	
	/* Entry action for state 'EnAttente'. */
	private void entryAction_main_region_GestionCommande__region0_EnAttente() {
		timer.setTimer(this, 5, (45 * 1000), false);
	}
	
	/* Exit action for state 'Demarrage'. */
	private void exitAction_main_region_Demarrage() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Préparé'. */
	private void exitAction_main_region_Pr_par_() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Boisson'. */
	private void exitAction_main_region_GestionCommande__region0_Boisson() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Slider'. */
	private void exitAction_main_region_GestionCommande__region0_Slider() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Payé'. */
	private void exitAction_main_region_GestionCommande__region0_Pay_() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'EnAttente'. */
	private void exitAction_main_region_GestionCommande__region0_EnAttente() {
		timer.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state Demarrage */
	private void enterSequence_main_region_Demarrage_default() {
		entryAction_main_region_Demarrage();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Demarrage;
	}
	
	/* 'default' enter sequence for state Préparé */
	private void enterSequence_main_region_Pr_par__default() {
		entryAction_main_region_Pr_par_();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Pr_par_;
	}
	
	/* 'default' enter sequence for state En prépartation */
	private void enterSequence_main_region_En_pr_partation_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_En_pr_partation;
	}
	
	/* 'default' enter sequence for state GestionCommande */
	private void enterSequence_main_region_GestionCommande_default() {
		enterSequence_main_region_GestionCommande__region0_default();
	}
	
	/* 'default' enter sequence for state Boisson */
	private void enterSequence_main_region_GestionCommande__region0_Boisson_default() {
		entryAction_main_region_GestionCommande__region0_Boisson();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_GestionCommande__region0_Boisson;
	}
	
	/* 'default' enter sequence for state Slider */
	private void enterSequence_main_region_GestionCommande__region0_Slider_default() {
		entryAction_main_region_GestionCommande__region0_Slider();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_GestionCommande__region0_Slider;
	}
	
	/* 'default' enter sequence for state Payé */
	private void enterSequence_main_region_GestionCommande__region0_Pay__default() {
		entryAction_main_region_GestionCommande__region0_Pay_();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_GestionCommande__region0_Pay_;
	}
	
	/* 'default' enter sequence for state EnAttente */
	private void enterSequence_main_region_GestionCommande__region0_EnAttente_default() {
		entryAction_main_region_GestionCommande__region0_EnAttente();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_GestionCommande__region0_EnAttente;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region null */
	private void enterSequence_main_region_GestionCommande__region0_default() {
		react_main_region_GestionCommande__region0__entry_Default();
	}
	
	/* Default exit sequence for state Demarrage */
	private void exitSequence_main_region_Demarrage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Demarrage();
	}
	
	/* Default exit sequence for state Préparé */
	private void exitSequence_main_region_Pr_par_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Pr_par_();
	}
	
	/* Default exit sequence for state En prépartation */
	private void exitSequence_main_region_En_pr_partation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state GestionCommande */
	private void exitSequence_main_region_GestionCommande() {
		exitSequence_main_region_GestionCommande__region0();
	}
	
	/* Default exit sequence for state Boisson */
	private void exitSequence_main_region_GestionCommande__region0_Boisson() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_GestionCommande__region0_Boisson();
	}
	
	/* Default exit sequence for state Slider */
	private void exitSequence_main_region_GestionCommande__region0_Slider() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_GestionCommande__region0_Slider();
	}
	
	/* Default exit sequence for state Payé */
	private void exitSequence_main_region_GestionCommande__region0_Pay_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_GestionCommande__region0_Pay_();
	}
	
	/* Default exit sequence for state EnAttente */
	private void exitSequence_main_region_GestionCommande__region0_EnAttente() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_GestionCommande__region0_EnAttente();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Demarrage:
			exitSequence_main_region_Demarrage();
			break;
		case main_region_Pr_par_:
			exitSequence_main_region_Pr_par_();
			break;
		case main_region_En_pr_partation:
			exitSequence_main_region_En_pr_partation();
			break;
		case main_region_GestionCommande__region0_Boisson:
			exitSequence_main_region_GestionCommande__region0_Boisson();
			break;
		case main_region_GestionCommande__region0_Slider:
			exitSequence_main_region_GestionCommande__region0_Slider();
			break;
		case main_region_GestionCommande__region0_Pay_:
			exitSequence_main_region_GestionCommande__region0_Pay_();
			break;
		case main_region_GestionCommande__region0_EnAttente:
			exitSequence_main_region_GestionCommande__region0_EnAttente();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region null */
	private void exitSequence_main_region_GestionCommande__region0() {
		switch (stateVector[0]) {
		case main_region_GestionCommande__region0_Boisson:
			exitSequence_main_region_GestionCommande__region0_Boisson();
			break;
		case main_region_GestionCommande__region0_Slider:
			exitSequence_main_region_GestionCommande__region0_Slider();
			break;
		case main_region_GestionCommande__region0_Pay_:
			exitSequence_main_region_GestionCommande__region0_Pay_();
			break;
		case main_region_GestionCommande__region0_EnAttente:
			exitSequence_main_region_GestionCommande__region0_EnAttente();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Demarrage_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_GestionCommande__region0__entry_Default() {
		enterSequence_main_region_GestionCommande__region0_EnAttente_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Demarrage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_Demarrage();
				sCInterface.raiseEnAttente();
				
				enterSequence_main_region_GestionCommande_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Pr_par__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_Pr_par_();
				sCInterface.raiseNettoyageText();
				
				enterSequence_main_region_Demarrage_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_En_pr_partation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.boissonPrete) {
				exitSequence_main_region_En_pr_partation();
				enterSequence_main_region_Pr_par__default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancelButton) {
				exitSequence_main_region_GestionCommande();
				sCInterface.raiseDoReset();
				
				enterSequence_main_region_Demarrage_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region0_Boisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_GestionCommande__region0_Boisson();
				enterSequence_main_region_GestionCommande__region0_EnAttente_default();
				main_region_GestionCommande_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region0_Slider_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_GestionCommande__region0_Slider();
				enterSequence_main_region_GestionCommande__region0_EnAttente_default();
				main_region_GestionCommande_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region0_Pay__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_main_region_GestionCommande();
				sCInterface.raisePrepareBoisson();
				
				enterSequence_main_region_En_pr_partation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region0_EnAttente_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.nFCButton) {
				exitSequence_main_region_GestionCommande__region0_EnAttente();
				enterSequence_main_region_GestionCommande__region0_Pay__default();
				main_region_GestionCommande_react(false);
			} else {
				if (sCInterface.slider) {
					exitSequence_main_region_GestionCommande__region0_EnAttente();
					enterSequence_main_region_GestionCommande__region0_Slider_default();
					main_region_GestionCommande_react(false);
				} else {
					if (sCInterface.coffeeButton) {
						exitSequence_main_region_GestionCommande__region0_EnAttente();
						sCInterface.raiseUpdateBoisson();
						
						enterSequence_main_region_GestionCommande__region0_Boisson_default();
						main_region_GestionCommande_react(false);
					} else {
						if (timeEvents[5]) {
							exitSequence_main_region_GestionCommande();
							sCInterface.raiseDoReset();
							
							enterSequence_main_region_Demarrage_default();
							react();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
}
