/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.drinkingmachine;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkingMachineStatemachine implements IDrinkingMachineStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean cancelButton;
		
		
		public void raiseCancelButton() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancelButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coffeeButton;
		
		
		public void raiseCoffeeButton() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coffeeButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean slider;
		
		
		public void raiseSlider() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							slider = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nFCButton;
		
		
		public void raiseNFCButton() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							nFCButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean boissonPrete;
		
		
		public void raiseBoissonPrete() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							boissonPrete = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coinButton;
		
		
		public void raiseCoinButton() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coinButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean confirmationCoin;
		
		
		public void raiseConfirmationCoin() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							confirmationCoin = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean confirmationNFC;
		
		
		public void raiseConfirmationNFC() {
			synchronized(DrinkingMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							confirmationNFC = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nettoyageText;
		
		
		public boolean isRaisedNettoyageText() {
			synchronized(DrinkingMachineStatemachine.this) {
				return nettoyageText;
			}
		}
		
		protected void raiseNettoyageText() {
			synchronized(DrinkingMachineStatemachine.this) {
				nettoyageText = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onNettoyageTextRaised();
				}
			}
		}
		
		private boolean doReset;
		
		
		public boolean isRaisedDoReset() {
			synchronized(DrinkingMachineStatemachine.this) {
				return doReset;
			}
		}
		
		protected void raiseDoReset() {
			synchronized(DrinkingMachineStatemachine.this) {
				doReset = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetRaised();
				}
			}
		}
		
		private boolean prepareBoisson;
		
		
		public boolean isRaisedPrepareBoisson() {
			synchronized(DrinkingMachineStatemachine.this) {
				return prepareBoisson;
			}
		}
		
		protected void raisePrepareBoisson() {
			synchronized(DrinkingMachineStatemachine.this) {
				prepareBoisson = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPrepareBoissonRaised();
				}
			}
		}
		
		private boolean enAttente;
		
		
		public boolean isRaisedEnAttente() {
			synchronized(DrinkingMachineStatemachine.this) {
				return enAttente;
			}
		}
		
		protected void raiseEnAttente() {
			synchronized(DrinkingMachineStatemachine.this) {
				enAttente = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEnAttenteRaised();
				}
			}
		}
		
		private boolean updateSlider;
		
		
		public boolean isRaisedUpdateSlider() {
			synchronized(DrinkingMachineStatemachine.this) {
				return updateSlider;
			}
		}
		
		protected void raiseUpdateSlider() {
			synchronized(DrinkingMachineStatemachine.this) {
				updateSlider = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onUpdateSliderRaised();
				}
			}
		}
		
		private boolean updateBoisson;
		
		
		public boolean isRaisedUpdateBoisson() {
			synchronized(DrinkingMachineStatemachine.this) {
				return updateBoisson;
			}
		}
		
		protected void raiseUpdateBoisson() {
			synchronized(DrinkingMachineStatemachine.this) {
				updateBoisson = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onUpdateBoissonRaised();
				}
			}
		}
		
		private boolean finishText;
		
		
		public boolean isRaisedFinishText() {
			synchronized(DrinkingMachineStatemachine.this) {
				return finishText;
			}
		}
		
		protected void raiseFinishText() {
			synchronized(DrinkingMachineStatemachine.this) {
				finishText = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onFinishTextRaised();
				}
			}
		}
		
		private boolean lectureCarte;
		
		
		public boolean isRaisedLectureCarte() {
			synchronized(DrinkingMachineStatemachine.this) {
				return lectureCarte;
			}
		}
		
		protected void raiseLectureCarte() {
			synchronized(DrinkingMachineStatemachine.this) {
				lectureCarte = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onLectureCarteRaised();
				}
			}
		}
		
		private boolean increaseCoin;
		
		
		public boolean isRaisedIncreaseCoin() {
			synchronized(DrinkingMachineStatemachine.this) {
				return increaseCoin;
			}
		}
		
		protected void raiseIncreaseCoin() {
			synchronized(DrinkingMachineStatemachine.this) {
				increaseCoin = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onIncreaseCoinRaised();
				}
			}
		}
		
		private boolean renduMonnaie;
		
		
		public boolean isRaisedRenduMonnaie() {
			synchronized(DrinkingMachineStatemachine.this) {
				return renduMonnaie;
			}
		}
		
		protected void raiseRenduMonnaie() {
			synchronized(DrinkingMachineStatemachine.this) {
				renduMonnaie = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRenduMonnaieRaised();
				}
			}
		}
		
		private boolean paiementNFC;
		
		
		public boolean isRaisedPaiementNFC() {
			synchronized(DrinkingMachineStatemachine.this) {
				return paiementNFC;
			}
		}
		
		protected void raisePaiementNFC() {
			synchronized(DrinkingMachineStatemachine.this) {
				paiementNFC = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPaiementNFCRaised();
				}
			}
		}
		
		protected void clearEvents() {
			cancelButton = false;
			coffeeButton = false;
			slider = false;
			nFCButton = false;
			boissonPrete = false;
			coinButton = false;
			confirmationCoin = false;
			confirmationNFC = false;
		}
		protected void clearOutEvents() {
		
		nettoyageText = false;
		doReset = false;
		prepareBoisson = false;
		enAttente = false;
		updateSlider = false;
		updateBoisson = false;
		finishText = false;
		lectureCarte = false;
		increaseCoin = false;
		renduMonnaie = false;
		paiementNFC = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Demarrage,
		main_region_Pr_par_,
		main_region_En_pr_partation,
		main_region_GestionCommande,
		main_region_GestionCommande__region0_EnAttente,
		main_region_GestionCommande__region1_reset,
		main_region_GestionCommande__region1_test,
		main_region_GestionCommande__region2_EnAttentePaiement,
		main_region_GestionCommande__region2_PaimentNFC,
		main_region_GestionCommande__region2_PaimentLiquide,
		main_region_GestionCommande__region2_Pay_,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[5];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DrinkingMachineStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
				case main_region_Demarrage:
					main_region_Demarrage_react(true);
					break;
				case main_region_Pr_par_:
					main_region_Pr_par__react(true);
					break;
				case main_region_En_pr_partation:
					main_region_En_pr_partation_react(true);
					break;
				case main_region_GestionCommande__region0_EnAttente:
					main_region_GestionCommande__region0_EnAttente_react(true);
					break;
				case main_region_GestionCommande__region1_reset:
					main_region_GestionCommande__region1_reset_react(true);
					break;
				case main_region_GestionCommande__region1_test:
					main_region_GestionCommande__region1_test_react(true);
					break;
				case main_region_GestionCommande__region2_EnAttentePaiement:
					main_region_GestionCommande__region2_EnAttentePaiement_react(true);
					break;
				case main_region_GestionCommande__region2_PaimentNFC:
					main_region_GestionCommande__region2_PaimentNFC_react(true);
					break;
				case main_region_GestionCommande__region2_PaimentLiquide:
					main_region_GestionCommande__region2_PaimentLiquide_react(true);
					break;
				case main_region_GestionCommande__region2_Pay_:
					main_region_GestionCommande__region2_Pay__react(true);
					break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Demarrage:
			return stateVector[0] == State.main_region_Demarrage;
		case main_region_Pr_par_:
			return stateVector[0] == State.main_region_Pr_par_;
		case main_region_En_pr_partation:
			return stateVector[0] == State.main_region_En_pr_partation;
		case main_region_GestionCommande:
			return stateVector[0].ordinal() >= State.
					main_region_GestionCommande.ordinal()&& stateVector[0].ordinal() <= State.main_region_GestionCommande__region2_Pay_.ordinal();
		case main_region_GestionCommande__region0_EnAttente:
			return stateVector[0] == State.main_region_GestionCommande__region0_EnAttente;
		case main_region_GestionCommande__region1_reset:
			return stateVector[1] == State.main_region_GestionCommande__region1_reset;
		case main_region_GestionCommande__region1_test:
			return stateVector[1] == State.main_region_GestionCommande__region1_test;
		case main_region_GestionCommande__region2_EnAttentePaiement:
			return stateVector[2] == State.main_region_GestionCommande__region2_EnAttentePaiement;
		case main_region_GestionCommande__region2_PaimentNFC:
			return stateVector[2] == State.main_region_GestionCommande__region2_PaimentNFC;
		case main_region_GestionCommande__region2_PaimentLiquide:
			return stateVector[2] == State.main_region_GestionCommande__region2_PaimentLiquide;
		case main_region_GestionCommande__region2_Pay_:
			return stateVector[2] == State.main_region_GestionCommande__region2_Pay_;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseCancelButton() {
		sCInterface.raiseCancelButton();
	}
	
	public synchronized void raiseCoffeeButton() {
		sCInterface.raiseCoffeeButton();
	}
	
	public synchronized void raiseSlider() {
		sCInterface.raiseSlider();
	}
	
	public synchronized void raiseNFCButton() {
		sCInterface.raiseNFCButton();
	}
	
	public synchronized void raiseBoissonPrete() {
		sCInterface.raiseBoissonPrete();
	}
	
	public synchronized void raiseCoinButton() {
		sCInterface.raiseCoinButton();
	}
	
	public synchronized void raiseConfirmationCoin() {
		sCInterface.raiseConfirmationCoin();
	}
	
	public synchronized void raiseConfirmationNFC() {
		sCInterface.raiseConfirmationNFC();
	}
	
	public synchronized boolean isRaisedNettoyageText() {
		return sCInterface.isRaisedNettoyageText();
	}
	
	public synchronized boolean isRaisedDoReset() {
		return sCInterface.isRaisedDoReset();
	}
	
	public synchronized boolean isRaisedPrepareBoisson() {
		return sCInterface.isRaisedPrepareBoisson();
	}
	
	public synchronized boolean isRaisedEnAttente() {
		return sCInterface.isRaisedEnAttente();
	}
	
	public synchronized boolean isRaisedUpdateSlider() {
		return sCInterface.isRaisedUpdateSlider();
	}
	
	public synchronized boolean isRaisedUpdateBoisson() {
		return sCInterface.isRaisedUpdateBoisson();
	}
	
	public synchronized boolean isRaisedFinishText() {
		return sCInterface.isRaisedFinishText();
	}
	
	public synchronized boolean isRaisedLectureCarte() {
		return sCInterface.isRaisedLectureCarte();
	}
	
	public synchronized boolean isRaisedIncreaseCoin() {
		return sCInterface.isRaisedIncreaseCoin();
	}
	
	public synchronized boolean isRaisedRenduMonnaie() {
		return sCInterface.isRaisedRenduMonnaie();
	}
	
	public synchronized boolean isRaisedPaiementNFC() {
		return sCInterface.isRaisedPaiementNFC();
	}
	
	/* Entry action for state 'Demarrage'. */
	private void entryAction_main_region_Demarrage() {
		timer.setTimer(this, 0, 2500, false);
	}
	
	/* Entry action for state 'Préparé'. */
	private void entryAction_main_region_Pr_par_() {
		timer.setTimer(this, 1, (5 * 1000), false);
	}
	
	/* Entry action for state 'reset'. */
	private void entryAction_main_region_GestionCommande__region1_reset() {
		timer.setTimer(this, 2, (5 * 1000), false);
	}
	
	/* Entry action for state 'test'. */
	private void entryAction_main_region_GestionCommande__region1_test() {
		timer.setTimer(this, 3, 50, false);
	}
	
	/* Entry action for state 'Payé'. */
	private void entryAction_main_region_GestionCommande__region2_Pay_() {
		timer.setTimer(this, 4, (4 * 1000), false);
	}
	
	/* Exit action for state 'Demarrage'. */
	private void exitAction_main_region_Demarrage() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Préparé'. */
	private void exitAction_main_region_Pr_par_() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'reset'. */
	private void exitAction_main_region_GestionCommande__region1_reset() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'test'. */
	private void exitAction_main_region_GestionCommande__region1_test() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Payé'. */
	private void exitAction_main_region_GestionCommande__region2_Pay_() {
		timer.unsetTimer(this, 4);
	}
	
	/* 'default' enter sequence for state Demarrage */
	private void enterSequence_main_region_Demarrage_default() {
		entryAction_main_region_Demarrage();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Demarrage;
	}
	
	/* 'default' enter sequence for state Préparé */
	private void enterSequence_main_region_Pr_par__default() {
		entryAction_main_region_Pr_par_();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Pr_par_;
	}
	
	/* 'default' enter sequence for state En prépartation */
	private void enterSequence_main_region_En_pr_partation_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_En_pr_partation;
	}
	
	/* 'default' enter sequence for state GestionCommande */
	private void enterSequence_main_region_GestionCommande_default() {
		enterSequence_main_region_GestionCommande__region0_default();
		enterSequence_main_region_GestionCommande__region1_default();
		enterSequence_main_region_GestionCommande__region2_default();
	}
	
	/* 'default' enter sequence for state EnAttente */
	private void enterSequence_main_region_GestionCommande__region0_EnAttente_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_GestionCommande__region0_EnAttente;
	}
	
	/* 'default' enter sequence for state reset */
	private void enterSequence_main_region_GestionCommande__region1_reset_default() {
		entryAction_main_region_GestionCommande__region1_reset();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_GestionCommande__region1_reset;
	}
	
	/* 'default' enter sequence for state test */
	private void enterSequence_main_region_GestionCommande__region1_test_default() {
		entryAction_main_region_GestionCommande__region1_test();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_GestionCommande__region1_test;
	}
	
	/* 'default' enter sequence for state EnAttentePaiement */
	private void enterSequence_main_region_GestionCommande__region2_EnAttentePaiement_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_GestionCommande__region2_EnAttentePaiement;
	}
	
	/* 'default' enter sequence for state PaimentNFC */
	private void enterSequence_main_region_GestionCommande__region2_PaimentNFC_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_GestionCommande__region2_PaimentNFC;
	}
	
	/* 'default' enter sequence for state PaimentLiquide */
	private void enterSequence_main_region_GestionCommande__region2_PaimentLiquide_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_GestionCommande__region2_PaimentLiquide;
	}
	
	/* 'default' enter sequence for state Payé */
	private void enterSequence_main_region_GestionCommande__region2_Pay__default() {
		entryAction_main_region_GestionCommande__region2_Pay_();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_GestionCommande__region2_Pay_;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region null */
	private void enterSequence_main_region_GestionCommande__region0_default() {
		react_main_region_GestionCommande__region0__entry_Default();
	}
	
	/* 'default' enter sequence for region null */
	private void enterSequence_main_region_GestionCommande__region1_default() {
		react_main_region_GestionCommande__region1__entry_Default();
	}
	
	/* 'default' enter sequence for region null */
	private void enterSequence_main_region_GestionCommande__region2_default() {
		react_main_region_GestionCommande__region2__entry_Default();
	}
	
	/* Default exit sequence for state Demarrage */
	private void exitSequence_main_region_Demarrage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Demarrage();
	}
	
	/* Default exit sequence for state Préparé */
	private void exitSequence_main_region_Pr_par_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Pr_par_();
	}
	
	/* Default exit sequence for state En prépartation */
	private void exitSequence_main_region_En_pr_partation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state GestionCommande */
	private void exitSequence_main_region_GestionCommande() {
		exitSequence_main_region_GestionCommande__region0();
		exitSequence_main_region_GestionCommande__region1();
		exitSequence_main_region_GestionCommande__region2();
	}
	
	/* Default exit sequence for state EnAttente */
	private void exitSequence_main_region_GestionCommande__region0_EnAttente() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state reset */
	private void exitSequence_main_region_GestionCommande__region1_reset() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_GestionCommande__region1_reset();
	}
	
	/* Default exit sequence for state test */
	private void exitSequence_main_region_GestionCommande__region1_test() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_GestionCommande__region1_test();
	}
	
	/* Default exit sequence for state EnAttentePaiement */
	private void exitSequence_main_region_GestionCommande__region2_EnAttentePaiement() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state PaimentNFC */
	private void exitSequence_main_region_GestionCommande__region2_PaimentNFC() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state PaimentLiquide */
	private void exitSequence_main_region_GestionCommande__region2_PaimentLiquide() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Payé */
	private void exitSequence_main_region_GestionCommande__region2_Pay_() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_GestionCommande__region2_Pay_();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Demarrage:
			exitSequence_main_region_Demarrage();
			break;
		case main_region_Pr_par_:
			exitSequence_main_region_Pr_par_();
			break;
		case main_region_En_pr_partation:
			exitSequence_main_region_En_pr_partation();
			break;
		case main_region_GestionCommande__region0_EnAttente:
			exitSequence_main_region_GestionCommande__region0_EnAttente();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_GestionCommande__region1_reset:
			exitSequence_main_region_GestionCommande__region1_reset();
			break;
		case main_region_GestionCommande__region1_test:
			exitSequence_main_region_GestionCommande__region1_test();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_GestionCommande__region2_EnAttentePaiement:
			exitSequence_main_region_GestionCommande__region2_EnAttentePaiement();
			break;
		case main_region_GestionCommande__region2_PaimentNFC:
			exitSequence_main_region_GestionCommande__region2_PaimentNFC();
			break;
		case main_region_GestionCommande__region2_PaimentLiquide:
			exitSequence_main_region_GestionCommande__region2_PaimentLiquide();
			break;
		case main_region_GestionCommande__region2_Pay_:
			exitSequence_main_region_GestionCommande__region2_Pay_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region null */
	private void exitSequence_main_region_GestionCommande__region0() {
		switch (stateVector[0]) {
		case main_region_GestionCommande__region0_EnAttente:
			exitSequence_main_region_GestionCommande__region0_EnAttente();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region null */
	private void exitSequence_main_region_GestionCommande__region1() {
		switch (stateVector[1]) {
		case main_region_GestionCommande__region1_reset:
			exitSequence_main_region_GestionCommande__region1_reset();
			break;
		case main_region_GestionCommande__region1_test:
			exitSequence_main_region_GestionCommande__region1_test();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region null */
	private void exitSequence_main_region_GestionCommande__region2() {
		switch (stateVector[2]) {
		case main_region_GestionCommande__region2_EnAttentePaiement:
			exitSequence_main_region_GestionCommande__region2_EnAttentePaiement();
			break;
		case main_region_GestionCommande__region2_PaimentNFC:
			exitSequence_main_region_GestionCommande__region2_PaimentNFC();
			break;
		case main_region_GestionCommande__region2_PaimentLiquide:
			exitSequence_main_region_GestionCommande__region2_PaimentLiquide();
			break;
		case main_region_GestionCommande__region2_Pay_:
			exitSequence_main_region_GestionCommande__region2_Pay_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Demarrage_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_GestionCommande__region0__entry_Default() {
		enterSequence_main_region_GestionCommande__region0_EnAttente_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_GestionCommande__region1__entry_Default() {
		enterSequence_main_region_GestionCommande__region1_reset_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_GestionCommande__region2__entry_Default() {
		enterSequence_main_region_GestionCommande__region2_EnAttentePaiement_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Demarrage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_Demarrage();
				sCInterface.raiseEnAttente();
				
				enterSequence_main_region_GestionCommande_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Pr_par__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_Pr_par_();
				sCInterface.raiseNettoyageText();
				
				enterSequence_main_region_Demarrage_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_En_pr_partation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.boissonPrete) {
				exitSequence_main_region_En_pr_partation();
				sCInterface.raiseFinishText();
				
				enterSequence_main_region_Pr_par__default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancelButton) {
				exitSequence_main_region_GestionCommande();
				sCInterface.raiseDoReset();
				
				enterSequence_main_region_Demarrage_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region0_EnAttente_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.slider) {
				exitSequence_main_region_GestionCommande__region0_EnAttente();
				sCInterface.raiseUpdateSlider();
				
				enterSequence_main_region_GestionCommande__region0_EnAttente_default();
			} else {
				if (sCInterface.coffeeButton) {
					exitSequence_main_region_GestionCommande__region0_EnAttente();
					sCInterface.raiseUpdateBoisson();
					
					enterSequence_main_region_GestionCommande__region0_EnAttente_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region1_reset_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_GestionCommande();
				sCInterface.raiseDoReset();
				
				enterSequence_main_region_Demarrage_default();
				react();
			} else {
				exitSequence_main_region_GestionCommande__region1_reset();
				enterSequence_main_region_GestionCommande__region1_test_default();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region1_test_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_GestionCommande__region1_test();
				enterSequence_main_region_GestionCommande__region1_reset_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region2_EnAttentePaiement_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.nFCButton) {
				exitSequence_main_region_GestionCommande__region2_EnAttentePaiement();
				sCInterface.raiseLectureCarte();
				
				enterSequence_main_region_GestionCommande__region2_PaimentNFC_default();
				main_region_GestionCommande_react(false);
			} else {
				if (sCInterface.coinButton) {
					exitSequence_main_region_GestionCommande__region2_EnAttentePaiement();
					sCInterface.raiseIncreaseCoin();
					
					enterSequence_main_region_GestionCommande__region2_PaimentLiquide_default();
					main_region_GestionCommande_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region2_PaimentNFC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.confirmationNFC) {
				exitSequence_main_region_GestionCommande__region2_PaimentNFC();
				sCInterface.raisePaiementNFC();
				
				enterSequence_main_region_GestionCommande__region2_Pay__default();
				main_region_GestionCommande_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region2_PaimentLiquide_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.coinButton) {
				exitSequence_main_region_GestionCommande__region2_PaimentLiquide();
				sCInterface.raiseIncreaseCoin();
				
				enterSequence_main_region_GestionCommande__region2_PaimentLiquide_default();
			} else {
				if (sCInterface.confirmationCoin) {
					exitSequence_main_region_GestionCommande__region2_PaimentLiquide();
					sCInterface.raiseRenduMonnaie();
					
					enterSequence_main_region_GestionCommande__region2_Pay__default();
					main_region_GestionCommande_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande__region2_Pay__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_main_region_GestionCommande();
				sCInterface.raisePrepareBoisson();
				
				enterSequence_main_region_En_pr_partation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
}
