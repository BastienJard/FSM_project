/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.drinkingMachine;

import fr.univcotedazur.polytech.si4.fsm.project.IStatemachine;
import fr.univcotedazur.polytech.si4.fsm.project.ITimed;
import fr.univcotedazur.polytech.si4.fsm.project.ITimerService;
import fr.univcotedazur.polytech.si4.fsm.project.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkingMachineStatemachine implements IStatemachine, ITimed {
	public enum State {
		MAIN_REGION_DEMARRAGE,
		MAIN_REGION_ATTENTERÉCUPÉRATION,
		MAIN_REGION_EN_PRÉPARTATION,
		MAIN_REGION_GESTIONCOMMANDE,
		MAIN_REGION_GESTIONCOMMANDE_CHOOSEGESTION_ENATTENTE,
		MAIN_REGION_GESTIONCOMMANDE_RESETTIMER_RESET,
		MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_ENATTENTEPAIEMENT,
		MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIMENTNFC,
		MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_INSERTIONARGENT,
		MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAYÉ,
		MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_LECTURECARTE,
		MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIEMENTLIQUIDE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(DrinkingMachineStatemachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(DrinkingMachineStatemachine.this) {
			this.isExecuting = value;
		}
	}
	public DrinkingMachineStatemachine() {
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setIsThereBoisson(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		cancelButton = false;
		boissonButton = false;
		slider = false;
		nFCButton = false;
		boissonPrete = false;
		coinButton = false;
		confirmationLiquide = false;
		takeCup = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case MAIN_REGION_DEMARRAGE:
					main_region_Demarrage_react(true);
					break;
				case MAIN_REGION_ATTENTERÉCUPÉRATION:
					main_region_AttenteR_cup_ration_react(true);
					break;
				case MAIN_REGION_EN_PRÉPARTATION:
					main_region_En_pr_partation_react(true);
					break;
				case MAIN_REGION_GESTIONCOMMANDE_CHOOSEGESTION_ENATTENTE:
					main_region_GestionCommande_chooseGestion_EnAttente_react(true);
					break;
				case MAIN_REGION_GESTIONCOMMANDE_RESETTIMER_RESET:
					main_region_GestionCommande_resetTimer_reset_react(true);
					break;
				case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_ENATTENTEPAIEMENT:
					main_region_GestionCommande_paiementGestion_EnAttentePaiement_react(true);
					break;
				case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIMENTNFC:
					main_region_GestionCommande_paiementGestion_PaimentNFC_react(true);
					break;
				case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_INSERTIONARGENT:
					main_region_GestionCommande_paiementGestion_InsertionArgent_react(true);
					break;
				case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAYÉ:
					main_region_GestionCommande_paiementGestion_Pay__react(true);
					break;
				case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_LECTURECARTE:
					main_region_GestionCommande_paiementGestion_LectureCarte_react(true);
					break;
				case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIEMENTLIQUIDE:
					main_region_GestionCommande_paiementGestion_PaiementLiquide_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			nextEvent();
		} while ((((((((((((((cancelButton || boissonButton) || slider) || nFCButton) || boissonPrete) || coinButton) || confirmationLiquide) || takeCup) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_DEMARRAGE:
			return stateVector[0] == State.MAIN_REGION_DEMARRAGE;
		case MAIN_REGION_ATTENTERÉCUPÉRATION:
			return stateVector[0] == State.MAIN_REGION_ATTENTERÉCUPÉRATION;
		case MAIN_REGION_EN_PRÉPARTATION:
			return stateVector[0] == State.MAIN_REGION_EN_PRÉPARTATION;
		case MAIN_REGION_GESTIONCOMMANDE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_GESTIONCOMMANDE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIEMENTLIQUIDE.ordinal();
		case MAIN_REGION_GESTIONCOMMANDE_CHOOSEGESTION_ENATTENTE:
			return stateVector[0] == State.MAIN_REGION_GESTIONCOMMANDE_CHOOSEGESTION_ENATTENTE;
		case MAIN_REGION_GESTIONCOMMANDE_RESETTIMER_RESET:
			return stateVector[1] == State.MAIN_REGION_GESTIONCOMMANDE_RESETTIMER_RESET;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_ENATTENTEPAIEMENT:
			return stateVector[2] == State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_ENATTENTEPAIEMENT;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIMENTNFC:
			return stateVector[2] == State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIMENTNFC;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_INSERTIONARGENT:
			return stateVector[2] == State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_INSERTIONARGENT;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAYÉ:
			return stateVector[2] == State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAYÉ;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_LECTURECARTE:
			return stateVector[2] == State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_LECTURECARTE;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIEMENTLIQUIDE:
			return stateVector[2] == State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIEMENTLIQUIDE;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	private boolean cancelButton;
	
	
	public void raiseCancelButton() {
		synchronized(DrinkingMachineStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					cancelButton = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean boissonButton;
	
	
	public void raiseBoissonButton() {
		synchronized(DrinkingMachineStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					boissonButton = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean slider;
	
	
	public void raiseSlider() {
		synchronized(DrinkingMachineStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					slider = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean nFCButton;
	
	
	public void raiseNFCButton() {
		synchronized(DrinkingMachineStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					nFCButton = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean boissonPrete;
	
	
	public void raiseBoissonPrete() {
		synchronized(DrinkingMachineStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					boissonPrete = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean coinButton;
	
	
	public void raiseCoinButton() {
		synchronized(DrinkingMachineStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					coinButton = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean confirmationLiquide;
	
	
	public void raiseConfirmationLiquide() {
		synchronized(DrinkingMachineStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					confirmationLiquide = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean takeCup;
	
	
	public void raiseTakeCup() {
		synchronized(DrinkingMachineStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					takeCup = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean nettoyageText;
	
	
	protected void raiseNettoyageText() {
		synchronized(DrinkingMachineStatemachine.this) {
			nettoyageText = true;
			nettoyageTextObservable.next(null);
		}
	}
	
	private Observable<Void> nettoyageTextObservable = new Observable<Void>();
	
	public Observable<Void> getNettoyageText() {
		return nettoyageTextObservable;
	}
	
	private boolean doReset;
	
	
	protected void raiseDoReset() {
		synchronized(DrinkingMachineStatemachine.this) {
			doReset = true;
			doResetObservable.next(null);
		}
	}
	
	private Observable<Void> doResetObservable = new Observable<Void>();
	
	public Observable<Void> getDoReset() {
		return doResetObservable;
	}
	
	private boolean prepareBoisson;
	
	
	protected void raisePrepareBoisson() {
		synchronized(DrinkingMachineStatemachine.this) {
			prepareBoisson = true;
			prepareBoissonObservable.next(null);
		}
	}
	
	private Observable<Void> prepareBoissonObservable = new Observable<Void>();
	
	public Observable<Void> getPrepareBoisson() {
		return prepareBoissonObservable;
	}
	
	private boolean enAttente;
	
	
	protected void raiseEnAttente() {
		synchronized(DrinkingMachineStatemachine.this) {
			enAttente = true;
			enAttenteObservable.next(null);
		}
	}
	
	private Observable<Void> enAttenteObservable = new Observable<Void>();
	
	public Observable<Void> getEnAttente() {
		return enAttenteObservable;
	}
	
	private boolean updateSlider;
	
	
	protected void raiseUpdateSlider() {
		synchronized(DrinkingMachineStatemachine.this) {
			updateSlider = true;
			updateSliderObservable.next(null);
		}
	}
	
	private Observable<Void> updateSliderObservable = new Observable<Void>();
	
	public Observable<Void> getUpdateSlider() {
		return updateSliderObservable;
	}
	
	private boolean updateBoisson;
	
	
	protected void raiseUpdateBoisson() {
		synchronized(DrinkingMachineStatemachine.this) {
			updateBoisson = true;
			updateBoissonObservable.next(null);
		}
	}
	
	private Observable<Void> updateBoissonObservable = new Observable<Void>();
	
	public Observable<Void> getUpdateBoisson() {
		return updateBoissonObservable;
	}
	
	private boolean finishText;
	
	
	protected void raiseFinishText() {
		synchronized(DrinkingMachineStatemachine.this) {
			finishText = true;
			finishTextObservable.next(null);
		}
	}
	
	private Observable<Void> finishTextObservable = new Observable<Void>();
	
	public Observable<Void> getFinishText() {
		return finishTextObservable;
	}
	
	private boolean lectureCarte;
	
	
	protected void raiseLectureCarte() {
		synchronized(DrinkingMachineStatemachine.this) {
			lectureCarte = true;
			lectureCarteObservable.next(null);
		}
	}
	
	private Observable<Void> lectureCarteObservable = new Observable<Void>();
	
	public Observable<Void> getLectureCarte() {
		return lectureCarteObservable;
	}
	
	private boolean increaseCoin;
	
	
	protected void raiseIncreaseCoin() {
		synchronized(DrinkingMachineStatemachine.this) {
			increaseCoin = true;
			increaseCoinObservable.next(null);
		}
	}
	
	private Observable<Void> increaseCoinObservable = new Observable<Void>();
	
	public Observable<Void> getIncreaseCoin() {
		return increaseCoinObservable;
	}
	
	private boolean renduMonnaie;
	
	
	protected void raiseRenduMonnaie() {
		synchronized(DrinkingMachineStatemachine.this) {
			renduMonnaie = true;
			renduMonnaieObservable.next(null);
		}
	}
	
	private Observable<Void> renduMonnaieObservable = new Observable<Void>();
	
	public Observable<Void> getRenduMonnaie() {
		return renduMonnaieObservable;
	}
	
	private boolean paiementNFC;
	
	
	protected void raisePaiementNFC() {
		synchronized(DrinkingMachineStatemachine.this) {
			paiementNFC = true;
			paiementNFCObservable.next(null);
		}
	}
	
	private Observable<Void> paiementNFCObservable = new Observable<Void>();
	
	public Observable<Void> getPaiementNFC() {
		return paiementNFCObservable;
	}
	
	private boolean attentePaiement;
	
	
	protected void raiseAttentePaiement() {
		synchronized(DrinkingMachineStatemachine.this) {
			attentePaiement = true;
			attentePaiementObservable.next(null);
		}
	}
	
	private Observable<Void> attentePaiementObservable = new Observable<Void>();
	
	public Observable<Void> getAttentePaiement() {
		return attentePaiementObservable;
	}
	
	private boolean erreurPaiment;
	
	
	protected void raiseErreurPaiment() {
		synchronized(DrinkingMachineStatemachine.this) {
			erreurPaiment = true;
			erreurPaimentObservable.next(null);
		}
	}
	
	private Observable<Void> erreurPaimentObservable = new Observable<Void>();
	
	public Observable<Void> getErreurPaiment() {
		return erreurPaimentObservable;
	}
	
	private boolean isThereBoisson;
	
	public synchronized boolean getIsThereBoisson() {
		synchronized(DrinkingMachineStatemachine.this) {
			return isThereBoisson;
		}
	}
	
	public void setIsThereBoisson(boolean value) {
		synchronized(DrinkingMachineStatemachine.this) {
			this.isThereBoisson = value;
		}
	}
	
	/* Entry action for state 'Demarrage'. */
	private void entryAction_main_region_Demarrage() {
		timerService.setTimer(this, 0, 3500, false);
	}
	
	/* Entry action for state 'reset'. */
	private void entryAction_main_region_GestionCommande_resetTimer_reset() {
		timerService.setTimer(this, 1, (45 * 1000), false);
	}
	
	/* Entry action for state 'PaimentNFC'. */
	private void entryAction_main_region_GestionCommande_paiementGestion_PaimentNFC() {
		timerService.setTimer(this, 2, 10, true);
	}
	
	/* Entry action for state 'Payé'. */
	private void entryAction_main_region_GestionCommande_paiementGestion_Pay_() {
		timerService.setTimer(this, 3, (2 * 1000), false);
	}
	
	/* Entry action for state 'LectureCarte'. */
	private void entryAction_main_region_GestionCommande_paiementGestion_LectureCarte() {
		timerService.setTimer(this, 4, (3 * 1000), false);
	}
	
	/* Entry action for state 'PaiementLiquide'. */
	private void entryAction_main_region_GestionCommande_paiementGestion_PaiementLiquide() {
		timerService.setTimer(this, 5, 10, true);
	}
	
	/* Exit action for state 'Demarrage'. */
	private void exitAction_main_region_Demarrage() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'reset'. */
	private void exitAction_main_region_GestionCommande_resetTimer_reset() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'PaimentNFC'. */
	private void exitAction_main_region_GestionCommande_paiementGestion_PaimentNFC() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Payé'. */
	private void exitAction_main_region_GestionCommande_paiementGestion_Pay_() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'LectureCarte'. */
	private void exitAction_main_region_GestionCommande_paiementGestion_LectureCarte() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'PaiementLiquide'. */
	private void exitAction_main_region_GestionCommande_paiementGestion_PaiementLiquide() {
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state Demarrage */
	private void enterSequence_main_region_Demarrage_default() {
		entryAction_main_region_Demarrage();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_DEMARRAGE;
	}
	
	/* 'default' enter sequence for state AttenteRécupération */
	private void enterSequence_main_region_AttenteR_cup_ration_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_ATTENTERÉCUPÉRATION;
	}
	
	/* 'default' enter sequence for state En prépartation */
	private void enterSequence_main_region_En_pr_partation_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_EN_PRÉPARTATION;
	}
	
	/* 'default' enter sequence for state GestionCommande */
	private void enterSequence_main_region_GestionCommande_default() {
		enterSequence_main_region_GestionCommande_chooseGestion_default();
		enterSequence_main_region_GestionCommande_resetTimer_default();
		enterSequence_main_region_GestionCommande_paiementGestion_default();
	}
	
	/* 'default' enter sequence for state EnAttente */
	private void enterSequence_main_region_GestionCommande_chooseGestion_EnAttente_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_GESTIONCOMMANDE_CHOOSEGESTION_ENATTENTE;
	}
	
	/* 'default' enter sequence for state reset */
	private void enterSequence_main_region_GestionCommande_resetTimer_reset_default() {
		entryAction_main_region_GestionCommande_resetTimer_reset();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_GESTIONCOMMANDE_RESETTIMER_RESET;
	}
	
	/* 'default' enter sequence for state EnAttentePaiement */
	private void enterSequence_main_region_GestionCommande_paiementGestion_EnAttentePaiement_default() {
		nextStateIndex = 2;
		stateVector[2] = State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_ENATTENTEPAIEMENT;
	}
	
	/* 'default' enter sequence for state PaimentNFC */
	private void enterSequence_main_region_GestionCommande_paiementGestion_PaimentNFC_default() {
		entryAction_main_region_GestionCommande_paiementGestion_PaimentNFC();
		nextStateIndex = 2;
		stateVector[2] = State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIMENTNFC;
	}
	
	/* 'default' enter sequence for state InsertionArgent */
	private void enterSequence_main_region_GestionCommande_paiementGestion_InsertionArgent_default() {
		nextStateIndex = 2;
		stateVector[2] = State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_INSERTIONARGENT;
	}
	
	/* 'default' enter sequence for state Payé */
	private void enterSequence_main_region_GestionCommande_paiementGestion_Pay__default() {
		entryAction_main_region_GestionCommande_paiementGestion_Pay_();
		nextStateIndex = 2;
		stateVector[2] = State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAYÉ;
	}
	
	/* 'default' enter sequence for state LectureCarte */
	private void enterSequence_main_region_GestionCommande_paiementGestion_LectureCarte_default() {
		entryAction_main_region_GestionCommande_paiementGestion_LectureCarte();
		nextStateIndex = 2;
		stateVector[2] = State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_LECTURECARTE;
	}
	
	/* 'default' enter sequence for state PaiementLiquide */
	private void enterSequence_main_region_GestionCommande_paiementGestion_PaiementLiquide_default() {
		entryAction_main_region_GestionCommande_paiementGestion_PaiementLiquide();
		nextStateIndex = 2;
		stateVector[2] = State.MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIEMENTLIQUIDE;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region chooseGestion */
	private void enterSequence_main_region_GestionCommande_chooseGestion_default() {
		react_main_region_GestionCommande_chooseGestion__entry_Default();
	}
	
	/* 'default' enter sequence for region resetTimer */
	private void enterSequence_main_region_GestionCommande_resetTimer_default() {
		react_main_region_GestionCommande_resetTimer__entry_Default();
	}
	
	/* 'default' enter sequence for region paiementGestion */
	private void enterSequence_main_region_GestionCommande_paiementGestion_default() {
		react_main_region_GestionCommande_paiementGestion__entry_Default();
	}
	
	/* Default exit sequence for state Demarrage */
	private void exitSequence_main_region_Demarrage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Demarrage();
	}
	
	/* Default exit sequence for state AttenteRécupération */
	private void exitSequence_main_region_AttenteR_cup_ration() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state En prépartation */
	private void exitSequence_main_region_En_pr_partation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state GestionCommande */
	private void exitSequence_main_region_GestionCommande() {
		exitSequence_main_region_GestionCommande_chooseGestion();
		exitSequence_main_region_GestionCommande_resetTimer();
		exitSequence_main_region_GestionCommande_paiementGestion();
	}
	
	/* Default exit sequence for state EnAttente */
	private void exitSequence_main_region_GestionCommande_chooseGestion_EnAttente() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state reset */
	private void exitSequence_main_region_GestionCommande_resetTimer_reset() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
		
		exitAction_main_region_GestionCommande_resetTimer_reset();
	}
	
	/* Default exit sequence for state EnAttentePaiement */
	private void exitSequence_main_region_GestionCommande_paiementGestion_EnAttentePaiement() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state PaimentNFC */
	private void exitSequence_main_region_GestionCommande_paiementGestion_PaimentNFC() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
		
		exitAction_main_region_GestionCommande_paiementGestion_PaimentNFC();
	}
	
	/* Default exit sequence for state InsertionArgent */
	private void exitSequence_main_region_GestionCommande_paiementGestion_InsertionArgent() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Payé */
	private void exitSequence_main_region_GestionCommande_paiementGestion_Pay_() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
		
		exitAction_main_region_GestionCommande_paiementGestion_Pay_();
	}
	
	/* Default exit sequence for state LectureCarte */
	private void exitSequence_main_region_GestionCommande_paiementGestion_LectureCarte() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
		
		exitAction_main_region_GestionCommande_paiementGestion_LectureCarte();
	}
	
	/* Default exit sequence for state PaiementLiquide */
	private void exitSequence_main_region_GestionCommande_paiementGestion_PaiementLiquide() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
		
		exitAction_main_region_GestionCommande_paiementGestion_PaiementLiquide();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_DEMARRAGE:
			exitSequence_main_region_Demarrage();
			break;
		case MAIN_REGION_ATTENTERÉCUPÉRATION:
			exitSequence_main_region_AttenteR_cup_ration();
			break;
		case MAIN_REGION_EN_PRÉPARTATION:
			exitSequence_main_region_En_pr_partation();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_CHOOSEGESTION_ENATTENTE:
			exitSequence_main_region_GestionCommande_chooseGestion_EnAttente();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_GESTIONCOMMANDE_RESETTIMER_RESET:
			exitSequence_main_region_GestionCommande_resetTimer_reset();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_ENATTENTEPAIEMENT:
			exitSequence_main_region_GestionCommande_paiementGestion_EnAttentePaiement();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIMENTNFC:
			exitSequence_main_region_GestionCommande_paiementGestion_PaimentNFC();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_INSERTIONARGENT:
			exitSequence_main_region_GestionCommande_paiementGestion_InsertionArgent();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAYÉ:
			exitSequence_main_region_GestionCommande_paiementGestion_Pay_();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_LECTURECARTE:
			exitSequence_main_region_GestionCommande_paiementGestion_LectureCarte();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIEMENTLIQUIDE:
			exitSequence_main_region_GestionCommande_paiementGestion_PaiementLiquide();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region chooseGestion */
	private void exitSequence_main_region_GestionCommande_chooseGestion() {
		switch (stateVector[0]) {
		case MAIN_REGION_GESTIONCOMMANDE_CHOOSEGESTION_ENATTENTE:
			exitSequence_main_region_GestionCommande_chooseGestion_EnAttente();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region resetTimer */
	private void exitSequence_main_region_GestionCommande_resetTimer() {
		switch (stateVector[1]) {
		case MAIN_REGION_GESTIONCOMMANDE_RESETTIMER_RESET:
			exitSequence_main_region_GestionCommande_resetTimer_reset();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region paiementGestion */
	private void exitSequence_main_region_GestionCommande_paiementGestion() {
		switch (stateVector[2]) {
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_ENATTENTEPAIEMENT:
			exitSequence_main_region_GestionCommande_paiementGestion_EnAttentePaiement();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIMENTNFC:
			exitSequence_main_region_GestionCommande_paiementGestion_PaimentNFC();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_INSERTIONARGENT:
			exitSequence_main_region_GestionCommande_paiementGestion_InsertionArgent();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAYÉ:
			exitSequence_main_region_GestionCommande_paiementGestion_Pay_();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_LECTURECARTE:
			exitSequence_main_region_GestionCommande_paiementGestion_LectureCarte();
			break;
		case MAIN_REGION_GESTIONCOMMANDE_PAIEMENTGESTION_PAIEMENTLIQUIDE:
			exitSequence_main_region_GestionCommande_paiementGestion_PaiementLiquide();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Demarrage_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_GestionCommande_chooseGestion__entry_Default() {
		enterSequence_main_region_GestionCommande_chooseGestion_EnAttente_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_GestionCommande_resetTimer__entry_Default() {
		enterSequence_main_region_GestionCommande_resetTimer_reset_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_GestionCommande_paiementGestion__entry_Default() {
		enterSequence_main_region_GestionCommande_paiementGestion_EnAttentePaiement_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Demarrage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_Demarrage();
				raiseEnAttente();
				
				setIsThereBoisson(false);
				
				enterSequence_main_region_GestionCommande_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_AttenteR_cup_ration_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (takeCup) {
				exitSequence_main_region_AttenteR_cup_ration();
				raiseNettoyageText();
				
				enterSequence_main_region_Demarrage_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_En_pr_partation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (boissonPrete) {
				exitSequence_main_region_En_pr_partation();
				raiseFinishText();
				
				enterSequence_main_region_AttenteR_cup_ration_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (cancelButton) {
				exitSequence_main_region_GestionCommande();
				raiseDoReset();
				
				enterSequence_main_region_Demarrage_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_chooseGestion_EnAttente_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (slider) {
				exitSequence_main_region_GestionCommande_chooseGestion_EnAttente();
				raiseUpdateSlider();
				
				enterSequence_main_region_GestionCommande_chooseGestion_EnAttente_default();
			} else {
				if (boissonButton) {
					exitSequence_main_region_GestionCommande_chooseGestion_EnAttente();
					raiseUpdateBoisson();
					
					setIsThereBoisson(true);
					
					enterSequence_main_region_GestionCommande_chooseGestion_EnAttente_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_resetTimer_reset_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_GestionCommande();
				raiseDoReset();
				
				enterSequence_main_region_Demarrage_default();
				react();
			} else {
				if ((boissonButton || (slider || (nFCButton || coinButton)))) {
					exitSequence_main_region_GestionCommande_resetTimer_reset();
					enterSequence_main_region_GestionCommande_resetTimer_reset_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_paiementGestion_EnAttentePaiement_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (nFCButton) {
				exitSequence_main_region_GestionCommande_paiementGestion_EnAttentePaiement();
				raiseLectureCarte();
				
				enterSequence_main_region_GestionCommande_paiementGestion_LectureCarte_default();
				main_region_GestionCommande_react(false);
			} else {
				if (coinButton) {
					exitSequence_main_region_GestionCommande_paiementGestion_EnAttentePaiement();
					raiseIncreaseCoin();
					
					enterSequence_main_region_GestionCommande_paiementGestion_InsertionArgent_default();
					main_region_GestionCommande_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_paiementGestion_PaimentNFC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[2]) && (getIsThereBoisson()))) {
				exitSequence_main_region_GestionCommande_paiementGestion_PaimentNFC();
				raisePaiementNFC();
				
				enterSequence_main_region_GestionCommande_paiementGestion_Pay__default();
				main_region_GestionCommande_react(false);
			} else {
				if (coinButton) {
					exitSequence_main_region_GestionCommande_paiementGestion_PaimentNFC();
					raiseErreurPaiment();
					
					enterSequence_main_region_GestionCommande_paiementGestion_PaimentNFC_default();
					main_region_GestionCommande_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_paiementGestion_InsertionArgent_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (coinButton) {
				exitSequence_main_region_GestionCommande_paiementGestion_InsertionArgent();
				raiseIncreaseCoin();
				
				enterSequence_main_region_GestionCommande_paiementGestion_InsertionArgent_default();
				main_region_GestionCommande_react(false);
			} else {
				if (nFCButton) {
					exitSequence_main_region_GestionCommande_paiementGestion_InsertionArgent();
					raiseErreurPaiment();
					
					enterSequence_main_region_GestionCommande_paiementGestion_InsertionArgent_default();
					main_region_GestionCommande_react(false);
				} else {
					if (confirmationLiquide) {
						exitSequence_main_region_GestionCommande_paiementGestion_InsertionArgent();
						enterSequence_main_region_GestionCommande_paiementGestion_PaiementLiquide_default();
						main_region_GestionCommande_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_paiementGestion_Pay__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_GestionCommande();
				raisePrepareBoisson();
				
				enterSequence_main_region_En_pr_partation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_paiementGestion_LectureCarte_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_main_region_GestionCommande_paiementGestion_LectureCarte();
				raiseAttentePaiement();
				
				enterSequence_main_region_GestionCommande_paiementGestion_PaimentNFC_default();
				main_region_GestionCommande_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_GestionCommande_paiementGestion_PaiementLiquide_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[5]) && (getIsThereBoisson()))) {
				exitSequence_main_region_GestionCommande_paiementGestion_PaiementLiquide();
				raiseRenduMonnaie();
				
				enterSequence_main_region_GestionCommande_paiementGestion_Pay__default();
				main_region_GestionCommande_react(false);
			} else {
				if (nFCButton) {
					exitSequence_main_region_GestionCommande_paiementGestion_PaiementLiquide();
					raiseErreurPaiment();
					
					enterSequence_main_region_GestionCommande_paiementGestion_PaiementLiquide_default();
					main_region_GestionCommande_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_GestionCommande_react(try_transition);
		}
		return did_transition;
	}
	
}
